// This file is automatically generated - DO NOT EDIT MANUALLY!
using System.Collections.Generic;
using Unity.MARS.Query;

namespace Unity.MARS.Data
{
    partial class CachedTraitCollection
    {
        ///<summary>All trait values of type Boolean associated with this context</summary>
        List<Dictionary<int, System.Boolean>> SemanticTagCollections;

        ///<summary>All trait values of type Int32 associated with this context</summary>
        List<Dictionary<int, System.Int32>> IntCollections;

        ///<summary>All trait values of type Single associated with this context</summary>
        List<Dictionary<int, System.Single>> FloatCollections;

        ///<summary>All trait values of type String associated with this context</summary>
        List<Dictionary<int, System.String>> StringCollections;

        ///<summary>All trait values of type Pose associated with this context</summary>
        List<Dictionary<int, UnityEngine.Pose>> PoseCollections;

        ///<summary>All trait values of type Vector2 associated with this context</summary>
        List<Dictionary<int, UnityEngine.Vector2>> Vector2Collections;

        void ClearInternal(CachedTraitCollection self)
        {
            if(SemanticTagCollections != null)
            {
                for(var i = 0; i < SemanticTagCollections.Count; i++)
                {
                    SemanticTagCollections[i] = null;
                }
            }

            if(IntCollections != null)
            {
                for(var i = 0; i < IntCollections.Count; i++)
                {
                    IntCollections[i] = null;
                }
            }

            if(FloatCollections != null)
            {
                for(var i = 0; i < FloatCollections.Count; i++)
                {
                    FloatCollections[i] = null;
                }
            }

            if(StringCollections != null)
            {
                for(var i = 0; i < StringCollections.Count; i++)
                {
                    StringCollections[i] = null;
                }
            }

            if(PoseCollections != null)
            {
                for(var i = 0; i < PoseCollections.Count; i++)
                {
                    PoseCollections[i] = null;
                }
            }

            if(Vector2Collections != null)
            {
                for(var i = 0; i < Vector2Collections.Count; i++)
                {
                    Vector2Collections[i] = null;
                }
            }
        }

        void FromConditions(Conditions conditions)
        {
            var semanticTagLength = conditions.GetTypeCount(out ISemanticTagCondition[] semanticTagConditions);
            if(semanticTagLength > 0)
            {
                SemanticTagCollections = new List<Dictionary<int, System.Boolean>>();
                for(var i = 0; i < semanticTagLength; i++)
                {
                    SemanticTagCollections.Add(null);
                }
            }

            var intLength = conditions.GetTypeCount(out ICondition<System.Int32>[] intConditions);
            if(intLength > 0)
            {
                IntCollections = new List<Dictionary<int, System.Int32>>();
                for(var i = 0; i < intLength; i++)
                {
                    IntCollections.Add(null);
                }
            }

            var floatLength = conditions.GetTypeCount(out ICondition<System.Single>[] floatConditions);
            if(floatLength > 0)
            {
                FloatCollections = new List<Dictionary<int, System.Single>>();
                for(var i = 0; i < floatLength; i++)
                {
                    FloatCollections.Add(null);
                }
            }

            var stringLength = conditions.GetTypeCount(out ICondition<System.String>[] stringConditions);
            if(stringLength > 0)
            {
                StringCollections = new List<Dictionary<int, System.String>>();
                for(var i = 0; i < stringLength; i++)
                {
                    StringCollections.Add(null);
                }
            }

            var poseLength = conditions.GetTypeCount(out ICondition<UnityEngine.Pose>[] poseConditions);
            if(poseLength > 0)
            {
                PoseCollections = new List<Dictionary<int, UnityEngine.Pose>>();
                for(var i = 0; i < poseLength; i++)
                {
                    PoseCollections.Add(null);
                }
            }

            var vector2Length = conditions.GetTypeCount(out ICondition<UnityEngine.Vector2>[] vector2Conditions);
            if(vector2Length > 0)
            {
                Vector2Collections = new List<Dictionary<int, UnityEngine.Vector2>>();
                for(var i = 0; i < vector2Length; i++)
                {
                    Vector2Collections.Add(null);
                }
            }
        }

        bool CheckDestroyedInternal(CachedTraitCollection self)
        {
            if(SemanticTagCollections != null)
            {
                foreach(var dictionary in SemanticTagCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(IntCollections != null)
            {
                foreach(var dictionary in IntCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(FloatCollections != null)
            {
                foreach(var dictionary in FloatCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(StringCollections != null)
            {
                foreach(var dictionary in StringCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(PoseCollections != null)
            {
                foreach(var dictionary in PoseCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(Vector2Collections != null)
            {
                foreach(var dictionary in Vector2Collections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            return false;
        }

        public bool TryGetType(out List<Dictionary<int, System.Boolean>> traits)
        {
            traits = SemanticTagCollections;
            return SemanticTagCollections != null;
        }

        public bool TryGetType(out List<Dictionary<int, System.Int32>> traits)
        {
            traits = IntCollections;
            return IntCollections != null;
        }

        public bool TryGetType(out List<Dictionary<int, System.Single>> traits)
        {
            traits = FloatCollections;
            return FloatCollections != null;
        }

        public bool TryGetType(out List<Dictionary<int, System.String>> traits)
        {
            traits = StringCollections;
            return StringCollections != null;
        }

        public bool TryGetType(out List<Dictionary<int, UnityEngine.Pose>> traits)
        {
            traits = PoseCollections;
            return PoseCollections != null;
        }

        public bool TryGetType(out List<Dictionary<int, UnityEngine.Vector2>> traits)
        {
            traits = Vector2Collections;
            return Vector2Collections != null;
        }
    }
}
