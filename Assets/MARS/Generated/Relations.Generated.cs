// This file is automatically generated - DO NOT EDIT MANUALLY!
using UnityEngine;
using Unity.XRTools.Utils;

namespace Unity.MARS.Query
{
    public partial class Relations
    {
        ///<summary>All Relations of type Int32 associated with this context</summary>
        IRelation<System.Int32>[] IntRelations;

        ///<summary>All Relations of type Pose associated with this context</summary>
        IRelation<UnityEngine.Pose>[] PoseRelations;

        ///<summary>All Relations of type Vector2 associated with this context</summary>
        IRelation<UnityEngine.Vector2>[] Vector2Relations;

        public bool TryGetType(out IRelation<System.Int32>[] relations)
        {
            relations = IntRelations;
            return relations != null;
        }

        public bool TryGetType(out IRelation<UnityEngine.Pose>[] relations)
        {
            relations = PoseRelations;
            return relations != null;
        }

        public bool TryGetType(out IRelation<UnityEngine.Vector2>[] relations)
        {
            relations = Vector2Relations;
            return relations != null;
        }

        ///<summary>Get the number of conditions of type Int32 associated with this context</summary>
        public int GetTypeCount(out IRelation<System.Int32>[] relations)
        {
            return !TryGetType(out relations) ? 0 : relations.Length;
        }

        ///<summary>Get the number of conditions of type Pose associated with this context</summary>
        public int GetTypeCount(out IRelation<UnityEngine.Pose>[] relations)
        {
            return !TryGetType(out relations) ? 0 : relations.Length;
        }

        ///<summary>Get the number of conditions of type Vector2 associated with this context</summary>
        public int GetTypeCount(out IRelation<UnityEngine.Vector2>[] relations)
        {
            return !TryGetType(out relations) ? 0 : relations.Length;
        }

        public void FromRelation(Relation relation)
        {
            var intCondition = relation as IRelation<System.Int32>;
            IntRelations = intCondition != null ? new[] { intCondition } : null;

            var poseCondition = relation as IRelation<UnityEngine.Pose>;
            PoseRelations = poseCondition != null ? new[] { poseCondition } : null;

            var vector2Condition = relation as IRelation<UnityEngine.Vector2>;
            Vector2Relations = vector2Condition != null ? new[] { vector2Condition } : null;
        }

        void GatherComponents<TComponentRootType>(CachedComponentFilter<IRelation, TComponentRootType> componentFilter)
            where TComponentRootType : Component
        {
            IntRelations = componentFilter.GetMatchingComponents<IRelation<System.Int32>>();
            Count += IntRelations.Length;

            PoseRelations = componentFilter.GetMatchingComponents<IRelation<UnityEngine.Pose>>();
            Count += PoseRelations.Length;

            Vector2Relations = componentFilter.GetMatchingComponents<IRelation<UnityEngine.Vector2>>();
            Count += Vector2Relations.Length;
        }
    }
}
