// This file is automatically generated - DO NOT EDIT MANUALLY!
using System;

namespace Unity.MARS.Data
{
    public partial class MARSDatabase
    {
        ///<summary>Provides all trait data of type Boolean</summary>
        internal MARSTraitDataProvider<System.Boolean> SemanticTagTraitProvider { get; private set; }

        ///<summary>Provides all trait data of type Int32</summary>
        internal MARSTraitDataProvider<System.Int32> IntTraitProvider { get; private set; }

        ///<summary>Provides all trait data of type Single</summary>
        internal MARSTraitDataProvider<System.Single> FloatTraitProvider { get; private set; }

        ///<summary>Provides all trait data of type String</summary>
        internal MARSTraitDataProvider<System.String> StringTraitProvider { get; private set; }

        ///<summary>Provides all trait data of type Pose</summary>
        internal MARSTraitDataProvider<UnityEngine.Pose> PoseTraitProvider { get; private set; }

        ///<summary>Provides all trait data of type Vector2</summary>
        internal MARSTraitDataProvider<UnityEngine.Vector2> Vector2TraitProvider { get; private set; }

        void InitializeTraitProviders(Action<int> setDirtyIfNeeded)
        {
            SemanticTagTraitProvider = new MARSTraitDataProvider<System.Boolean>(setDirtyIfNeeded, this);
            RegisterTraitTypeProvider(SemanticTagTraitProvider);

            IntTraitProvider = new MARSTraitDataProvider<System.Int32>(setDirtyIfNeeded, this);
            RegisterTraitTypeProvider(IntTraitProvider);

            FloatTraitProvider = new MARSTraitDataProvider<System.Single>(setDirtyIfNeeded, this);
            RegisterTraitTypeProvider(FloatTraitProvider);

            StringTraitProvider = new MARSTraitDataProvider<System.String>(setDirtyIfNeeded, this);
            RegisterTraitTypeProvider(StringTraitProvider);

            PoseTraitProvider = new MARSTraitDataProvider<UnityEngine.Pose>(setDirtyIfNeeded, this);
            RegisterTraitTypeProvider(PoseTraitProvider);

            Vector2TraitProvider = new MARSTraitDataProvider<UnityEngine.Vector2>(setDirtyIfNeeded, this);
            RegisterTraitTypeProvider(Vector2TraitProvider);
        }

        void UnloadTraits(MARSDatabase self)
        {
            self.SemanticTagTraitProvider.Unload();
            self.IntTraitProvider.Unload();
            self.FloatTraitProvider.Unload();
            self.StringTraitProvider.Unload();
            self.PoseTraitProvider.Unload();
            self.Vector2TraitProvider.Unload();
        }

        void ClearTraits(MARSDatabase self)
        {
            self.SemanticTagTraitProvider.Clear();
            self.IntTraitProvider.Clear();
            self.FloatTraitProvider.Clear();
            self.StringTraitProvider.Clear();
            self.PoseTraitProvider.Clear();
            self.Vector2TraitProvider.Clear();
        }

        internal void GetTraitProvider(out MARSTraitDataProvider<System.Boolean> provider)
        {
            provider = SemanticTagTraitProvider;
        }

        internal void GetTraitProvider(out MARSTraitDataProvider<System.Int32> provider)
        {
            provider = IntTraitProvider;
        }

        internal void GetTraitProvider(out MARSTraitDataProvider<System.Single> provider)
        {
            provider = FloatTraitProvider;
        }

        internal void GetTraitProvider(out MARSTraitDataProvider<System.String> provider)
        {
            provider = StringTraitProvider;
        }

        internal void GetTraitProvider(out MARSTraitDataProvider<UnityEngine.Pose> provider)
        {
            provider = PoseTraitProvider;
        }

        internal void GetTraitProvider(out MARSTraitDataProvider<UnityEngine.Vector2> provider)
        {
            provider = Vector2TraitProvider;
        }

        void StartBufferingInternal(MARSDatabase self)
        {
            SemanticTagTraitProvider.StartUpdateBuffering();

            IntTraitProvider.StartUpdateBuffering();

            FloatTraitProvider.StartUpdateBuffering();

            StringTraitProvider.StartUpdateBuffering();

            Vector2TraitProvider.StartUpdateBuffering();
        }

        void StopBufferingInternal(MARSDatabase self)
        {
            SemanticTagTraitProvider.StopUpdateBuffering();

            IntTraitProvider.StopUpdateBuffering();

            FloatTraitProvider.StopUpdateBuffering();

            StringTraitProvider.StopUpdateBuffering();

            Vector2TraitProvider.StopUpdateBuffering();
        }
    }
}
