// This file is automatically generated - DO NOT EDIT MANUALLY!
using System.Collections.Generic;
using Unity.MARS.Data;

namespace Unity.MARS.Query
{
    partial class MatchRatingDataTransform
    {
        public static bool RateConditionMatchesInternal(Conditions conditions,
            CachedTraitCollection traits, ConditionRatingsData ratings)
        {
            conditions.TryGetType(out ICondition<System.Int32>[] intConditions);
            if(!RateConditionType(intConditions, traits, ratings[typeof(System.Int32)]))
                return false;

            conditions.TryGetType(out ICondition<System.Single>[] floatConditions);
            if(!RateConditionType(floatConditions, traits, ratings[typeof(System.Single)]))
                return false;

            conditions.TryGetType(out ICondition<System.String>[] stringConditions);
            if(!RateConditionType(stringConditions, traits, ratings[typeof(System.String)]))
                return false;

            conditions.TryGetType(out ICondition<UnityEngine.Pose>[] poseConditions);
            if(!RateConditionType(poseConditions, traits, ratings[typeof(UnityEngine.Pose)]))
                return false;

            conditions.TryGetType(out ICondition<UnityEngine.Vector2>[] vector2Conditions);
            if(!RateConditionType(vector2Conditions, traits, ratings[typeof(UnityEngine.Vector2)]))
                return false;

            return true;
        }

        internal static bool RateConditionType(ICondition<System.Int32>[] typeConditions,
            CachedTraitCollection traitCollections, List<Dictionary<int, float>> ratings)
        {
            if (typeConditions.Length == 0)
                return true;

            if (!traitCollections.TryGetType(out List<Dictionary<int, System.Int32>> traits))
                return false;

            return RateConditionMatches(typeConditions, traits, ratings);
        }

        internal static bool RateConditionType(ICondition<System.Single>[] typeConditions,
            CachedTraitCollection traitCollections, List<Dictionary<int, float>> ratings)
        {
            if (typeConditions.Length == 0)
                return true;

            if (!traitCollections.TryGetType(out List<Dictionary<int, System.Single>> traits))
                return false;

            return RateConditionMatches(typeConditions, traits, ratings);
        }

        internal static bool RateConditionType(ICondition<System.String>[] typeConditions,
            CachedTraitCollection traitCollections, List<Dictionary<int, float>> ratings)
        {
            if (typeConditions.Length == 0)
                return true;

            if (!traitCollections.TryGetType(out List<Dictionary<int, System.String>> traits))
                return false;

            return RateConditionMatches(typeConditions, traits, ratings);
        }

        internal static bool RateConditionType(ICondition<UnityEngine.Pose>[] typeConditions,
            CachedTraitCollection traitCollections, List<Dictionary<int, float>> ratings)
        {
            if (typeConditions.Length == 0)
                return true;

            if (!traitCollections.TryGetType(out List<Dictionary<int, UnityEngine.Pose>> traits))
                return false;

            return RateConditionMatches(typeConditions, traits, ratings);
        }

        internal static bool RateConditionType(ICondition<UnityEngine.Vector2>[] typeConditions,
            CachedTraitCollection traitCollections, List<Dictionary<int, float>> ratings)
        {
            if (typeConditions.Length == 0)
                return true;

            if (!traitCollections.TryGetType(out List<Dictionary<int, UnityEngine.Vector2>> traits))
                return false;

            return RateConditionMatches(typeConditions, traits, ratings);
        }
    }
}
