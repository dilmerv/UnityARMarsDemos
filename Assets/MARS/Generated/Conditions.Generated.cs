// This file is automatically generated - DO NOT EDIT MANUALLY!
using UnityEngine;
using Unity.XRTools.Utils;

namespace Unity.MARS.Query
{
    public partial class Conditions
    {
        ///<summary>All Conditions of type Boolean associated with this context</summary>
        ISemanticTagCondition[] SemanticTagConditions;

        ///<summary>All Conditions of type Int32 associated with this context</summary>
        ICondition<System.Int32>[] IntConditions;

        ///<summary>All Conditions of type Single associated with this context</summary>
        ICondition<System.Single>[] FloatConditions;

        ///<summary>All Conditions of type String associated with this context</summary>
        ICondition<System.String>[] StringConditions;

        ///<summary>All Conditions of type Pose associated with this context</summary>
        ICondition<UnityEngine.Pose>[] PoseConditions;

        ///<summary>All Conditions of type Vector2 associated with this context</summary>
        ICondition<UnityEngine.Vector2>[] Vector2Conditions;

        public bool TryGetType(out ISemanticTagCondition[] conditions)
        {
            conditions = SemanticTagConditions;
            return conditions != null;
        }

        public bool TryGetType(out ICondition<System.Int32>[] conditions)
        {
            conditions = IntConditions;
            return conditions != null;
        }

        public bool TryGetType(out ICondition<System.Single>[] conditions)
        {
            conditions = FloatConditions;
            return conditions != null;
        }

        public bool TryGetType(out ICondition<System.String>[] conditions)
        {
            conditions = StringConditions;
            return conditions != null;
        }

        public bool TryGetType(out ICondition<UnityEngine.Pose>[] conditions)
        {
            conditions = PoseConditions;
            return conditions != null;
        }

        public bool TryGetType(out ICondition<UnityEngine.Vector2>[] conditions)
        {
            conditions = Vector2Conditions;
            return conditions != null;
        }

        ///<summary>Get the number of conditions of type Boolean associated with this context</summary>
        public int GetTypeCount(out ISemanticTagCondition[] conditions)
        {
            return !TryGetType(out conditions) ? 0 : conditions.Length;
        }

        ///<summary>Get the number of conditions of type Int32 associated with this context</summary>
        public int GetTypeCount(out ICondition<System.Int32>[] conditions)
        {
            return !TryGetType(out conditions) ? 0 : conditions.Length;
        }

        ///<summary>Get the number of conditions of type Single associated with this context</summary>
        public int GetTypeCount(out ICondition<System.Single>[] conditions)
        {
            return !TryGetType(out conditions) ? 0 : conditions.Length;
        }

        ///<summary>Get the number of conditions of type String associated with this context</summary>
        public int GetTypeCount(out ICondition<System.String>[] conditions)
        {
            return !TryGetType(out conditions) ? 0 : conditions.Length;
        }

        ///<summary>Get the number of conditions of type Pose associated with this context</summary>
        public int GetTypeCount(out ICondition<UnityEngine.Pose>[] conditions)
        {
            return !TryGetType(out conditions) ? 0 : conditions.Length;
        }

        ///<summary>Get the number of conditions of type Vector2 associated with this context</summary>
        public int GetTypeCount(out ICondition<UnityEngine.Vector2>[] conditions)
        {
            return !TryGetType(out conditions) ? 0 : conditions.Length;
        }

        public void FromCondition(Condition condition)
        {
            var semanticTagCondition = condition as ISemanticTagCondition;
            SemanticTagConditions = semanticTagCondition != null ? new[] { semanticTagCondition } : null;

            var intCondition = condition as ICondition<System.Int32>;
            IntConditions = intCondition != null ? new[] { intCondition } : null;

            var floatCondition = condition as ICondition<System.Single>;
            FloatConditions = floatCondition != null ? new[] { floatCondition } : null;

            var stringCondition = condition as ICondition<System.String>;
            StringConditions = stringCondition != null ? new[] { stringCondition } : null;

            var poseCondition = condition as ICondition<UnityEngine.Pose>;
            PoseConditions = poseCondition != null ? new[] { poseCondition } : null;

            var vector2Condition = condition as ICondition<UnityEngine.Vector2>;
            Vector2Conditions = vector2Condition != null ? new[] { vector2Condition } : null;
        }

        void GatherComponents<TComponentRootType>(CachedComponentFilter<ICondition, TComponentRootType> componentFilter)
            where TComponentRootType : Component
        {
            SemanticTagConditions = componentFilter.GetMatchingComponents<ISemanticTagCondition>();
            IntConditions = componentFilter.GetMatchingComponents<ICondition<System.Int32>>();
            FloatConditions = componentFilter.GetMatchingComponents<ICondition<System.Single>>();
            StringConditions = componentFilter.GetMatchingComponents<ICondition<System.String>>();
            PoseConditions = componentFilter.GetMatchingComponents<ICondition<UnityEngine.Pose>>();
            Vector2Conditions = componentFilter.GetMatchingComponents<ICondition<UnityEngine.Vector2>>();
        }

        static int CountInternal(Conditions self)
        {
            var count = 0;
            count += self.SemanticTagConditions.Length;
            count += self.IntConditions.Length;
            count += self.FloatConditions.Length;
            count += self.StringConditions.Length;
            count += self.PoseConditions.Length;
            count += self.Vector2Conditions.Length;
            return count;
        }
    }
}
