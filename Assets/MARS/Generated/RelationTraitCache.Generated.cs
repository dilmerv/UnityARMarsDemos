// This file is automatically generated - DO NOT EDIT MANUALLY!
using System.Collections.Generic;
using Unity.XRTools.Utils;
using Unity.MARS.Query;

namespace Unity.MARS.Data
{
    partial class RelationTraitCache
    {
        ///<summary>All trait values of type Int32 associated with this Proxy's Relations</summary>
        List<ChildTraits<System.Int32>> IntCollections;

        ///<summary>All trait values of type Pose associated with this Proxy's Relations</summary>
        List<ChildTraits<UnityEngine.Pose>> PoseCollections;

        ///<summary>All trait values of type Vector2 associated with this Proxy's Relations</summary>
        List<ChildTraits<UnityEngine.Vector2>> Vector2Collections;

        void ClearInternal(RelationTraitCache self)
        {
            if(IntCollections != null)
            {
                for(var i = 0; i < IntCollections.Count; i++)
                {
                    IntCollections[i] = null;
                }
            }

            if(PoseCollections != null)
            {
                for(var i = 0; i < PoseCollections.Count; i++)
                {
                    PoseCollections[i] = null;
                }
            }

            if(Vector2Collections != null)
            {
                for(var i = 0; i < Vector2Collections.Count; i++)
                {
                    Vector2Collections[i] = null;
                }
            }
        }

        void FromRelations(Relations relations)
        {
            var intLength = relations.GetTypeCount(out IRelation<System.Int32>[] intRelations);
            if(intLength > 0)
            {
                IntCollections = new List<ChildTraits<System.Int32>>();
                IntCollections.Fill(intLength);
            }

            var poseLength = relations.GetTypeCount(out IRelation<UnityEngine.Pose>[] poseRelations);
            if(poseLength > 0)
            {
                PoseCollections = new List<ChildTraits<UnityEngine.Pose>>();
                PoseCollections.Fill(poseLength);
            }

            var vector2Length = relations.GetTypeCount(out IRelation<UnityEngine.Vector2>[] vector2Relations);
            if(vector2Length > 0)
            {
                Vector2Collections = new List<ChildTraits<UnityEngine.Vector2>>();
                Vector2Collections.Fill(vector2Length);
            }
        }

        bool CheckDestroyedInternal(RelationTraitCache self)
        {
            if(IntCollections != null)
            {
                foreach(var dictionary in IntCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(PoseCollections != null)
            {
                foreach(var dictionary in PoseCollections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            if(Vector2Collections != null)
            {
                foreach(var dictionary in Vector2Collections)
                {
                    if(dictionary == null)
                        return true;
                }
            }

            return false;
        }

        public bool TryGetType(out List<ChildTraits<System.Int32>> traits)
        {
            traits = IntCollections;
            return IntCollections != null;
        }

        public bool TryGetType(out List<ChildTraits<UnityEngine.Pose>> traits)
        {
            traits = PoseCollections;
            return PoseCollections != null;
        }

        public bool TryGetType(out List<ChildTraits<UnityEngine.Vector2>> traits)
        {
            traits = Vector2Collections;
            return Vector2Collections != null;
        }
    }
}
